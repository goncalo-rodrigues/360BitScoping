#! /usr/bin/env python
import dpkt
import socket
import sys, getopt
import dpkt
from scapy.all import *
from tracker_filter import tracker_filter, print_output
from HandShakeTracker import HandhakeFilter


def main(argv):
    output_file_path = ""
    try:
        opts, args = getopt.getopt(argv, "ho:", ["help"])
    except getopt.GetoptError:
        print 'for help use -h option'
        sys.exit(2)
    for opt, arg in opts:
        if opt == '-h':
            print 'Help\nUsage: 360.py <options> <inputfile>\n\
where possible options include:\n\
-h\t\tShow this dialog\n\
-o <file>\tSave all detected packets to file'

            sys.exit()
        if opt == '-o':
            output_file_path = arg
    if len(args) == 0:
        print 'Missing argument: input capture file'
        sys.exit()

    f = open(args[0])
    if output_file_path != "":
        output_f = open(output_file_path, 'w+')
        out_pcap = dpkt.pcap.Writer(output_f)
    else:
        out_pcap = None
        output_f = None
    pcap = rdpcap(f)
    sessions = pcap.sessions()
    filters = [tracker_filter, HandhakeFilter]
    # For each packet in the pcap process the contents
    for stream_desc, pkts in sessions.iteritems():
        for buf in pkts:
            packet_already_saved = False

            ip_pkt = buf.getlayer('IP')

            if ip_pkt is None:
                continue

            pkt = ip_pkt.payload

            ipsrc = ip_pkt.getfieldval('src')
            ipdst = ip_pkt.getfieldval('dst')
            iplen = ip_pkt.getfieldval('len')
            sport, dport = "UNK", "UNK"
            proto_name = pkt.name
            try:
                sport = pkt.getfieldval('sport')
                dport = pkt.getfieldval('dport')
            except AttributeError:
                pass

            for filt in filters:
                is_torrent, output = filt(pkt)
                if is_torrent:
                    filter_name = filt.__name__

                    if out_pcap is not None and not packet_already_saved:
                        out_pcap.writepkt(buf, buf.time)
                        packet_already_saved = True
                    # Print out the info
                    print 'Packet detected by %s' % filter_name
                    print '%s: %s:%s -> %s:%s   (len=%d)' % \
                          (proto_name, ipsrc, sport, ipdst, dport, iplen)
                    print 'Output generated by filter: %s\n' % output

    try:
        f.close()
        output_f.close()
    except:
        pass
if __name__ == "__main__":
    main(sys.argv[1:])
