import dpkt
import socket
import sys, getopt
from scapy.all import *
from tracker_filter import tracker_filter, print_output
from HandShakeTracker import HandhakeFilter

def DPIComponent(filepath, out_pcap):
    pcap = rdpcap(filepath)
    sessions = pcap.sessions()
    filters = [tracker_filter, HandhakeFilter]
    # For each packet in the pcap process the contents
    for stream_desc, pkts in sessions.iteritems():
        for buf in pkts:
            packet_already_saved = False

            ip_pkt = buf.getlayer('IP')

            if ip_pkt is None:
                continue

            pkt = ip_pkt.payload

            ipsrc = ip_pkt.getfieldval('src')
            ipdst = ip_pkt.getfieldval('dst')
            iplen = ip_pkt.getfieldval('len')
            sport, dport = "UNK", "UNK"
            proto_name = pkt.name
            try:
                sport = pkt.getfieldval('sport')
                dport = pkt.getfieldval('dport')
            except AttributeError:
                pass

            for filt in filters:
                is_torrent, output = filt(pkt)
                if is_torrent:
                    filter_name = filt.__name__

                    if out_pcap is not None and not packet_already_saved:
                        out_pcap.writepkt(buf, buf.time)
                        packet_already_saved = True
                    # Print out the info
                    print 'Packet detected by %s' % filter_name
                    print '%s: %s:%s -> %s:%s   (len=%d)' % \
                          (proto_name, ipsrc, sport, ipdst, dport, iplen)
                    print 'Output generated by filter: %s\n' % output
